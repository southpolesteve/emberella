// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-views
 */

(function() {
  var ESCAPE_REG_EXP, ESCAPE_REPLACEMENT, Emberella, QUERY_SUBSTITUTION, SEARCH_SUBSTITUTION, get, jQuery, set, typeOf;

  Emberella = window.Emberella;

  jQuery = window.jQuery;

  get = Ember.get;

  set = Ember.set;

  typeOf = Ember.typeOf;

  ESCAPE_REG_EXP = /[\-\[\]{}()*+?.,\\\^$|#\s]/g;

  ESCAPE_REPLACEMENT = '\\$&';

  SEARCH_SUBSTITUTION = /%s/;

  QUERY_SUBSTITUTION = /%q/;


  /*
    The `Emberella.AutocompleteView` combines a text field and a collection view
    to offer a list of suggested completions based on user input.
  
    TODO: Allow more flexible positioning of the suggestions list when near the
          bottom edge of the window?
    TODO: Code cleanup and refactor to allow autocomplete to integrate with
          other views
  
    @class AutocompleteView
    @namespace Emberella
    @extends Ember.ContainerView
    @uses Ember.ViewTargetActionSupport
    @uses Emberella.KeyboardControlMixin
    @uses Emberella.FocusableMixin
   */

  Emberella.AutocompleteView = Ember.ContainerView.extend(Ember.ViewTargetActionSupport, Emberella.KeyboardControlMixin, Emberella.FocusableMixin, {
    _isListVisible: false,
    init: function() {
      set(this, 'search', '');
      return this._super();
    },

    /*
      Declares this view is an autocomplete view.
    
      @property isAutocomplete
      @type Boolean
      @default true
      @final
     */
    isAutocomplete: true,

    /*
      @property childViews
     */
    childViews: ['inputView', 'listView'],

    /*
      @property defaultTemplate
      @final
     */
    defaultTemplate: Ember.Handlebars.compile(['<span class="emberella-autocomplete-item-content">{{{view.displayContent}}}</span>'].join(' ')),

    /*
      @property defaultHighlighter
      @final
     */
    defaultHighlighter: function(str, p1, offset, s) {
      return ['<strong>', p1, '</strong>'].join('');
    },

    /*
      @property defaultUpdater
      @final
     */
    defaultUpdater: function(value) {
      var contentPath;
      if (value == null) {
        value = get(this, 'selected');
      }
      contentPath = get(this, 'contentPath');
      return set(this, 'displayValue', get(value, contentPath));
    },

    /*
      @property defaultMatcher
      @final
     */
    defaultMatcher: function(item) {
      var match, path, searchPaths, _i, _len;
      searchPaths = get(this, 'searchPaths');
      match = false;
      for (_i = 0, _len = searchPaths.length; _i < _len; _i++) {
        path = searchPaths[_i];
        if (get(this, 'searchExpression').test(get(item, path))) {
          match = true;
          break;
        }
      }
      return match;
    },

    /*
      @property defaultSorter
      @final
     */
    defaultSorter: function(suggestions, search) {
      var m, match, path, pos, results, s, searchPaths, searches, si, term, ti, words, _i, _j, _k, _len, _len1;
      if (search == null) {
        search = get(this, 'search');
      }
      searchPaths = get(this, 'searchPaths');
      if (!search) {
        return Ember.A();
      }
      search = search.toLowerCase();
      words = search.split(/\s+/);
      searches = get(this, 'searches');
      suggestions = suggestions.slice().reverse();
      results = [];
      for (si = _i = 0, _len = searches.length; _i < _len; si = ++_i) {
        s = searches[si];
        s = this.stringToSearchExpression(s, search);
        results[si] = results[si] || new Array(words.length);
        for (ti = _j = suggestions.length - 1; _j >= 0; ti = _j += -1) {
          term = suggestions[ti];
          for (_k = 0, _len1 = searchPaths.length; _k < _len1; _k++) {
            path = searchPaths[_k];
            if (s.global) {
              s.lastIndex = 0;
            }
            if (m = s.exec(get(term, path))) {
              match = suggestions.splice(ti, 1)[0];
              if (m.length > 1 && (pos = words.indexOf(m[1].toLowerCase())) >= 0) {
                results[si][pos] = results[si][pos] || [];
                results[si][pos].push(match);
              } else {
                results[si].push(match);
              }
              break;
            }
          }
        }
      }
      return Ember.A([].concat.apply([], [].concat.apply([], [].concat(results))).concat(suggestions)).compact();
    },

    /*
      The current focus state of this view instance.
    
      @property hasFocus
     */
    hasFocusBinding: 'inputView.hasFocus',

    /*
      Prevent focus with TAB key.
    
      @property tabindex
      @type Integer
      @default -1
     */
    tabindex: -1,

    /*
      Add the 'emberella-autocomplete' class to the container element. Use this
      class to style your autocomplete input.
    
      @property classNames
      @type Array
      @default ['emberella-autocomplete']
     */
    classNames: ['emberella-autocomplete'],

    /*
      If true, the first suggestion in the list will be automatically selected
      for the user.
    
      @property autoSelect
      @type Boolean
      @default true
     */
    autoSelect: true,

    /*
      The maximum number of suggestions to show.
    
      @property items
      @type Number
      @default 10
     */
    items: 10,

    /*
      The number of ms to wait after the user finishes typing before beginning
      the suggestions retrieval process. If your suggestions are fetched
      asynchronously from a server, a bigger number will help to reduce the
      frequency of remote queries.
    
      @property delay
      @type Number
      @default 10
     */
    delay: 10,

    /*
      The minimum length a search string must reach before suggestions should be
      retrieved, assembled, or displayed.
    
      @property minLength
      @type Number
      @default 1
     */
    minLength: 1,

    /*
      The selected/highlighted suggestion.
    
      @property selected
      @type Mixed
      @default null
     */
    selected: null,

    /*
      The current value of the input field.
    
      @property value
      @type String
      @default ''
     */
    value: '',

    /*
      The placeholder attribute to assign to the autocomplete's input field.
    
      @property placeholder
      @type String
      @default ''
     */
    placeholder: '',

    /*
      The dot-delimited "Ember.get" path for finding a string value to display
      and use as the input value.
    
      For example, a list of US States might appear as an array of objects like
      `{"name":"California", "alpha-2":"CA"}`. To adopt the full state name as
      the value for this input, set the `contentPath` to `"name"`.
    
      @property contentPath
      @type String
      @default ''
     */
    contentPath: '',

    /*
      Either a space-delimited string or an array containing one or many
      dot-delimited "Ember.get" paths to examine for matches when searching.
    
      The `contentPath` will always be searched.
    
      For example, a list of US States might appear as an array of objects like
      `{"name":"California", "alpha-2":"CA", "nickname": "The Golden State"}`.
      To find suggestions by searching both the `name` and `alpha-2` attributes,
      set the `searchPath` property to `"alpha-2"`. To search across all three
      attributes, set the `searchPath` property to `"alpha-2 nickname"` or
      `["alpha-2", "nickname"]`.
    
      @property searchPath
      @type String
      @default ''
     */
    searchPath: '',

    /*
      The sort order for search results.
    
      `Emberella.AutocompleteView` begins the search process by assembling an
      array of all possible matches. It then prioritizes suggestions in the
      following order:
    
      1) exact matches
      2) result starts with the search string
      3) result starts with any "word" in the search (`"CA"` is different than
         `"C A"`, the latter includes results that start with "A")
      4) other matches
    
      Lastly, it takes the first x number of array items (where x is
      `this.get('items')`) and displays them as suggestions.
    
      If you wish to override the default behavior, you may supply your own array
      of sort expression strings.
    
      `%s` will be substituted with the escaped search as is
      `%q` will be substituted with the "word" finding query
    
      @property searches
      @type Array
      @default [
        '^%s$' #exact match
        '^%s'  #starts with search
        '^%q'  #starts with word
        '%s'   #string found
      ]
     */
    searches: ['^%s$', '^%s', '^%q', '%s'],

    /*
      The current search string.
    
      As the input value changes, the `search` property will be updated the
      number of ms specified in the `delay` property after the last change to the
      input value.
    
      @property search
      @type String
      @default null
     */
    search: null,

    /*
      Either an Array of available values to search through or a string to help a
      controller determine how to fetch suggestions.
    
      @property source
      @type {Array|String}
      @default Ember.A()
     */
    source: Ember.A(),

    /*
      Binds the `displayValue` property to the input view's value. As
      `displayValue` changes, the `search` property may eventually be updated to
      initiate the gathering of suggested values.
    
      @property displayValueBinding
      @type String
      @default 'inputView.value'
     */
    displayValueBinding: 'inputView.value',

    /*
      A listing with the current display value will appear as an option if this
      is `true`.
    
      If set to a value less than 0, the display value will be appended to the
      end of the suggestions listing. Otherwise, the display value will appear as
      the first suggestion in the list.
    
      TODO: adjust this behavior to do something more useful like display
      a message/error.
    
      @property suggestCurrentValue
      @type Boolean
      @default false
     */
    suggestCurrentValue: false,

    /*
      When `true`, the selected autocomplete suggestion is set as the value when
      the input loses focus.
    
      @property autocompleteOnFocusOut
      @type Boolean
      @default false
     */
    autocompleteOnFocusOut: false,

    /*
      The view class to use as the input field.
    
      @property inputViewClass
      @type Ember.View
      @default 'Emberella.AutocompleteInputView'
     */
    inputViewClass: 'Emberella.AutocompleteInputView',

    /*
      The view class to use as the suggestion collection view.
    
      @property listViewClass
      @type Ember.View
      @default 'Emberella.AutocompleteListView'
     */
    listViewClass: 'Emberella.AutocompleteListView',

    /*
      The view class to use for individual suggestion listing views.
    
      @property itemViewClass
      @type Ember.View
      @default 'Emberella.AutocompleteItemView'
     */
    itemViewClass: 'Emberella.AutocompleteItemView',

    /*
      A custom string.replace function to highlight matching strings in
      a suggestion.
    
      See the "Specifying a function as a parameter" section at
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
      for additional guidance.
    
      @property highlighter
      @type Function
      @default defaultHighlighter
     */
    highlighter: Ember.computed.defaultTo('defaultHighlighter'),

    /*
      A custom function for injecting a selected value into the input value.
    
      @property updater
      @type Function
      @default defaultUpdater
     */
    updater: Ember.computed.defaultTo('defaultUpdater'),

    /*
      A custom function for determining if a string or object should be included
      as a potential suggestion.
    
      The function is called in the context of this view instance and receives
      one argument: the item to test.
    
      @property matcher
      @type Function
      @default defaultMatcher
     */
    matcher: Ember.computed.defaultTo('defaultMatcher'),

    /*
      A custom function for sorting potential suggestions into the order to
      display to the user.
    
      The function is called in the context of this view instance and receives
      one argument: the Array of potential suggestions.
    
      @property matcher
      @type Function
      @default defaultMatcher
     */
    sorter: Ember.computed.defaultTo('defaultSorter'),

    /*
      An array of potential suggestions that match the current search criteria.
    
      This list is sorted and cut down to size in the `selection` property.
    
      @property allSuggestions
      @type Array
      @default []
     */
    allSuggestions: Ember.A(),

    /*
      The suggested values to display in a list to the user.
    
      @property suggestions
      @type Array
      @default []
      @readOnly
     */
    suggestions: Ember.computed(function() {
      var allSuggestions, contentPath, displayValue, inputObject, items, method, part, parts, suggestCurrentValue, _suggestions;
      items = get(this, 'items');
      displayValue = get(this, 'displayValue') || '';
      allSuggestions = get(this, 'allSuggestions').slice();
      _suggestions = allSuggestions.slice(0, items);
      if (!(suggestCurrentValue = get(this, 'suggestCurrentValue'))) {
        return _suggestions;
      }
      contentPath = get(this, 'contentPath');
      inputObject = displayValue;
      if (contentPath !== '') {
        inputObject = {};
        parts = contentPath.split('.');
        while (parts.length > 0) {
          part = parts.shift();
          inputObject[part] = parts.length > 0 ? {} : displayValue;
        }
      }
      method = +suggestCurrentValue < 0 ? "pushObject" : "unshiftObject";
      _suggestions[method](inputObject);
      return _suggestions;
    }).property('allSuggestions', 'items', 'sorter').readOnly(),

    /*
      A regular expression to use for finding items to suggest.
    
      @property searchExpression
      @type RegExp
      @readOnly
     */
    searchExpression: Ember.computed(function() {
      return new RegExp(get(this, '_searchExpression'), 'gi');
    }).volatile().readOnly(),

    /*
      An array of paths to use with `Ember.get`. Always includes the
      `contentPath` property.
    
      @property searchPaths
      @type Array
      @default [this.get('contentPath')]
      @readOnly
     */
    searchPaths: Ember.computed(function() {
      var ret, searchPath;
      searchPath = get(this, 'searchPath');
      if (searchPath.split != null) {
        searchPath = searchPath.split(/\s+/);
      }
      ret = Ember.A([get(this, 'contentPath')]);
      if (Ember.isArray(searchPath)) {
        ret.addObjects(searchPath);
      }
      return ret;
    }).property('contentPath', 'searchPath').readOnly(),

    /*
      Specifies if the list of suggestions should be visible or not.
    
      @property isListVisible
      @type Boolean
      @default false
     */
    isListVisible: Ember.computed(function(key, value) {
      var len;
      key = '_' + key;
      len = get(this, 'suggestions.length');
      if (arguments.length === 1) {
        return !!(get(this, 'hasFocus') && get(this, key) && len > 0);
      } else {
        set(this, key, value);
        return this;
      }
    }).property('hasFocus', '_isListVisible', 'suggestions.length', 'displayValue'),

    /*
      The debounced method for responding to changes in the input value.
    
      @property debouncedValueDidChange
      @type Function
     */
    debouncedValueDidChange: Ember.computed(function() {
      return Emberella.debounce(((function(_this) {
        return function() {
          return _this._displayValueChangeHandler();
        };
      })(this)), get(this, 'delay'));
    }).property('delay'),

    /*
      The input view instance.
    
      @property inputView
      @type Ember.View
     */
    inputView: Ember.computed(function() {
      return this.getInputViewClass();
    }).property('inputViewClass'),

    /*
      The list view instance.
    
      @property inputView
      @type Ember.View
     */
    listView: Ember.computed(function() {
      return this.getListViewClass();
    }).property('listViewClass'),

    /*
      Escape a string for use as a regular expression.
    
      @method escapeSearch
      @param String str The string to excape
      @return String The escaped string
     */
    escapeSearch: function(str) {
      return jQuery.trim(str != null ? str : '').replace(ESCAPE_REG_EXP, ESCAPE_REPLACEMENT);
    },

    /*
      Convert a plain string into a word search regular expression (for finding
      matches for any word in the given string).
    
      @method expressionFor
      @param String str The string to convert
      @return String The expression string
     */
    expressionFor: function(str) {
      var search, searchExpression, words;
      search = this.escapeSearch(str);
      words = '(' + search.replace(/(\\\s)+/gi, '|').split('|').join(')|(') + ')';
      searchExpression = [search];
      if (words.indexOf('|') >= 0) {
        searchExpression = [].concat(searchExpression, '|', words);
      }
      searchExpression.unshift('(');
      searchExpression.push(')');
      return searchExpression.join('');
    },

    /*
      When called without arguments, the `complete()` method applies the
      `selected` property as the new value for the input and maintains the view's
      current focus state.
    
      You may also provide a specific item to insert as the input value or choose
      to alter the focus state.
    
      @method complete
      @param Mixed value The value to commit to
      @param Boolean retainFocus
      @chainable
     */
    complete: function(value, retainFocus) {
      if (value == null) {
        value = get(this, 'selected');
      }
      if (retainFocus == null) {
        retainFocus = this.isFocused();
      }
      if (!value) {
        return this;
      }
      get(this, 'updater').call(this, value);
      if (retainFocus) {
        this.focus();
      }
      this.hide();
      return this;
    },

    /*
      Move focus into the input element of this view instance.
    
      @method focus
      @chainable
     */
    focus: function() {
      var element, inputView;
      if (!(((inputView = get(this, 'inputView')) != null) && get(inputView, 'state') === 'inDOM')) {
        return this;
      }
      if (typeOf(inputView.focus) === 'function') {
        inputView.focus();
      } else {
        element = get(inputView, 'element');
        if (element != null) {
          element.focus();
        }
      }
      return this;
    },

    /*
      Convenience method for obtaining the view class for text input.
    
      @method getInputViewClass
      @return Ember.View
     */
    getInputViewClass: function() {
      return this._getViewClass('inputViewClass');
    },

    /*
      Convenience method for obtaining the view class for suggestion listings.
    
      @method getItemViewClass
      @return Ember.View
     */
    getItemViewClass: function() {
      return this._getViewClass('itemViewClass');
    },

    /*
      Convenience method for obtaining the view class for suggestion list.
    
      @method getListViewClass
      @return Ember.View
     */
    getListViewClass: function() {
      return this._getViewClass('listViewClass');
    },

    /*
      The index of the currently selected suggestion in the array of suggestions.
    
      @method indexOfSelection
      @return Integer
     */
    indexOfSelection: function() {
      var suggestions;
      suggestions = get(this, 'suggestions');
      if (!suggestions || suggestions.length === 0) {
        return -1;
      }
      return suggestions.indexOf(get(this, 'selected'));
    },

    /*
      Determine if the autocomplete view or any of its child views have focus.
    
      @method isFocused
      @return Boolean
     */
    isFocused: function() {
      var focused;
      focused = this.find(function(childView) {
        return get(childView, 'hasFocus');
      });
      return !!focused;
    },

    /*
      Checks to see if the selected item is currently listed as a suggestion.
    
      @method isSelectedInContent
      @return Boolean
     */
    isSelectedInContent: function() {
      return this.indexOfSelection() >= 0;
    },

    /*
      Select the next suggestion (e.g. current selection index + 1) in the list.
      If no next selection is available, select the first suggestion.
    
      @method next
      @chainable
     */
    next: function() {
      this.move(1, get(this, 'suggestions.firstObject'));
      return this;
    },

    /*
      Select the previous suggestion (e.g. current selection index - 1) in the
      list. If no previous selection is available, select the last suggestion.
    
      @method previous
      @chainable
     */
    previous: function() {
      this.move(-1, get(this, 'suggestions.lastObject'));
      return this;
    },

    /*
      Adjust the selection index by the provided `delta`. If no object exists at
      the adjusted index, select the provided alternative instead.
    
      @method move
      @param Integer delta The adjustment to the selection index
      @param Mixed defaultSelection
      @chainable
     */
    move: function(delta, defaultSelection) {
      var idx, newIdx, selected, suggestions, _ref;
      suggestions = get(this, 'suggestions');
      idx = this.indexOfSelection();
      newIdx = Math.min(Math.max(-1, idx + delta), suggestions.length);
      selected = (_ref = (newIdx < 0 ? get(suggestions, 'lastObject') : suggestions.objectAt(newIdx))) != null ? _ref : defaultSelection;
      set(this, 'selected', selected);
      return this;
    },

    /*
      Set the `selected` property to the `content` of the provided view.
    
      Optionally, use the provided view content to complete the input value.
    
      @method selectMember
      @param Ember.View The view with content to mark `selected`
      @param Boolean complete If true, apply selected content to the input value
      @chainable
     */
    selectMember: function(view, complete) {
      var content;
      content = get(view, 'content');
      set(this, 'selected', content);
      if (complete) {
        this.complete(content);
      }
      return this;
    },

    /*
      Show the suggestion listing view.
    
      @method show
      @chainable
     */
    show: function() {
      set(this, '_isListVisible', true);
      return this;
    },

    /*
      Hide the suggestion listing view.
    
      @method hide
      @chainable
     */
    hide: function() {
      set(this, '_isListVisible', false);
      return this;
    },
    sort: function(arr, search) {
      var sorter;
      sorter = get(this, 'sorter');
      return sorter.call(this, arr, search);
    },

    /*
      Substitutes `%s` and `%q` with corresponding search strings and returns
      a regular expression.
    
      @method stringToSearchExpression
      @param String str An autocomplete expression string
      @param String search A regular expression safe search string
      @return RegExp
     */
    stringToSearchExpression: function(str, search) {
      str = str.replace(SEARCH_SUBSTITUTION, this.escapeSearch(search));
      str = str.replace(QUERY_SUBSTITUTION, this.expressionFor(search));
      return new RegExp(str, 'gi');
    },

    /*
      Shows and hides the list of completion options as the `suggestions` array
      property changes.
    
      @method suggestionsDidChange
     */
    suggestionsDidChange: Ember.observer(function() {
      var _ref;
      return set(this, 'selected', get(this, 'autoSelect') ? (_ref = get(this, 'suggestions.firstObject')) != null ? _ref : null : null);
    }, 'suggestions', 'suggestions.length'),

    /*
      Respond to the up arrow key while focus is on the input view.
    
      @event upArrowPressed
      @param Event e The jQuery keyDown event
      @param Boolean alt Alt/option key is pressed
      @param Boolean ctrl Control key is pressed
      @param Boolean meta Meta/Command key is pressed
      @param Boolean shift Shift key is pressed
     */
    upArrowPressed: function(e, alt, ctrl, meta, shift) {
      var len;
      len = get(this, 'suggestions.length');
      if (len === 0 || alt || ctrl || meta || shift) {
        return;
      }
      e.preventDefault();
      return this.show().previous();
    },

    /*
      Respond to the down arrow key while focus is on the input view.
    
      @event downArrowPressed
      @param Event e The jQuery keyDown event
      @param Boolean alt Alt/option key is pressed
      @param Boolean ctrl Control key is pressed
      @param Boolean meta Meta/Command key is pressed
      @param Boolean shift Shift key is pressed
     */
    downArrowPressed: function(e, alt, ctrl, meta, shift) {
      var len;
      len = get(this, 'suggestions.length');
      if (len === 0 || alt || ctrl || meta || shift) {
        return;
      }
      e.preventDefault();
      return this.show().next();
    },

    /*
      Respond to the return/enter key while focus is on the input view.
    
      @event enterPressed
      @param Event e The jQuery keyDown event
      @param Boolean alt Alt/option key is pressed
      @param Boolean ctrl Control key is pressed
      @param Boolean meta Meta/Command key is pressed
      @param Boolean shift Shift key is pressed
     */
    enterPressed: function(e, alt, ctrl, meta, shift) {
      if (get(this, 'isListVisible')) {
        return this.complete();
      }
    },

    /*
      @private
    
      A regular expression string to use for finding items to suggest.
    
      @property _searchExpression
      @type String
      @readOnly
     */
    _searchExpression: Ember.computed(function() {
      return this.expressionFor(get(this, 'search'));
    }).property('search').readOnly(),

    /*
      @private
    
      Updates the `search` property appropriately as the input value changes.
    
      @method _displayValueDidChange
     */
    _displayValueDidChange: Ember.observer(function() {
      var method;
      set(this, 'allSuggestions', Ember.A());
      method = get(this, 'displayValue.length') < get(this, 'minLength') ? 'hide' : 'show';
      this[method]();
      return get(this, 'debouncedValueDidChange')();
    }, 'displayValue', 'minLength'),

    /*
      @private
    
      Perform actions when focus entirely exits the tags input view.
    
      @method _hasFocusDidChange
     */
    _hasFocusDidChange: Ember.observer(function() {
      var displayValue, selected, _ref;
      if (!get(this, 'hasFocus')) {
        displayValue = (_ref = get(this, 'displayValue')) != null ? _ref : '';
        selected = get(this, 'selected');
        return Ember.run.later(this, function() {
          if (!this.isFocused() && displayValue.length >= get(this, 'minLength') && get(this, 'autocompleteOnFocusOut')) {
            return this.complete();
          }
        }, 100);
      }
    }, 'hasFocus'),
    searchFor: function(str, disableRemote) {
      var promise;
      promise = new Ember.RSVP.Promise((function(_this) {
        return function(resolve, reject) {
          var processResults, source, _ref;
          processResults = function(search, results) {
            if (str !== search) {
              return;
            }
            this.off('didRetrieveSuggestions', this, processResults);
            return Ember.run(null, resolve, this.sort(results, str));
          };
          _this.on('didRetrieveSuggestions', _this, processResults);
          source = (_ref = get(_this, 'source')) != null ? _ref : Ember.A();
          source = (typeOf(source) === 'string' && source !== '' ? get(source) : void 0) || source;
          set(_this, 'search', str);
          if (!disableRemote) {
            _this._triggerRemote(source);
          }
          if (Ember.isArray(source)) {
            return _this.trigger('didRetrieveSuggestions', str, _this._arraySearch(source));
          }
        };
      })(this));
      return promise;
    },

    /*
      @private
    
      Assemble or fetch search results. Will trigger the `searchForSuggestions`
      on the view's controller if the updated property is `'search'`.
    
      @method _searchDidChange
      @param Ember.View view Should typically be this view instance
      @param String property The property that changed
     */
    _searchDidChange: Ember.observer(function(view, property) {
      var len, search, suggestions;
      search = get(this, '_search') || '';
      len = search.length;
      len = len != null ? len : 0;
      if (len < get(this, 'minLength')) {
        suggestions = Ember.A();
        set(this, 'allSuggestions', suggestions);
        return suggestions;
      }
      if (this.isFocused()) {
        this.searchFor(search, property !== '_search').then((function(_this) {
          return function(results) {
            var displayValue;
            displayValue = get(_this, 'displayValue');
            if (search === displayValue) {
              return set(_this, 'allSuggestions', results);
            }
          };
        })(this));
      }
      return get(this, 'allSuggestions');
    }, '_search', 'matcher', 'minLength', 'source', 'source.length'),

    /*
      @private
    
      Search the provided array of items for suggestions.
    
      @method _getViewClass
      @param Array source An array of items to search for suggestions
      @return Array
     */
    _arraySearch: function(source) {
      var matcher, suggestions, term, _fn, _i, _len;
      matcher = get(this, 'matcher');
      suggestions = Ember.A();
      _fn = (function(_this) {
        return function(term) {
          if (matcher.call(_this, term)) {
            return suggestions.push(term);
          }
        };
      })(this);
      for (_i = 0, _len = source.length; _i < _len; _i++) {
        term = source[_i];
        _fn(term);
      }
      return suggestions;
    },

    /*
      @private
    
      Trigger action on context.
    
      @method _triggerRemote
      @param Mixed source
      @chainable
     */
    _triggerRemote: function(source) {
      var action, context;
      context = get(this, 'context');
      action = 'searchForSuggestions';
      if ((typeOf(source) === 'string') || ((context != null) && typeOf(context[action]) === 'function')) {
        this.triggerAction({
          action: action,
          actionContext: this
        });
      }
      return this;
    },

    /*
      @private
    
      Attempts to retrieve a view class from a given property name.
    
      @method _getViewClass
      @return Ember.View
     */
    _getViewClass: function(property) {
      var viewClass;
      viewClass = get(this, property);
      if (typeOf(viewClass) === 'string') {
        viewClass = get(viewClass);
      }
      return viewClass;
    },

    /*
      @private
    
      If valid, copy the input value to the `search` property.
    
      @method _displayValueChangeHandler
     */
    _displayValueChangeHandler: function() {
      if (get(this, 'isDestroyed') || get(this, 'isDestroying')) {
        return;
      }
      return set(this, '_search', get(this, 'displayValue.length') < get(this, 'minLength') ? '' : get(this, 'displayValue'));
    }
  });


  /*
    `Emberella.AutocompleteInputView` is designed to be a drop-in input view for
    `Emberella.AutocompleteView`. It sets up value bindings and disables the
    browser's built in autocomplete functionality.
  
    @class AutocompleteInputView
    @namespace Emberella
    @extends Ember.TextField
    @uses Emberella.FocusableMixin
    @uses Emberella.KeyboardControlMixin
    @uses Emberella.MembershipMixin
   */

  Emberella.AutocompleteInputView = Ember.TextField.extend(Emberella.FocusableMixin, Emberella.KeyboardControlMixin, Emberella.MembershipMixin, {
    attributeBindings: ['autocomplete'],
    autocomplete: 'off',
    inherit: ['value', 'placeholder']
  });


  /*
    `Emberella.AutocompleteListView` is designed to be a drop-in collection view
    for `Emberella.AutocompleteView`. It sets up property bindings to allow
    properties to be inherited from the parent `Emberella.AutocompleteView`.
  
    @class AutocompleteListView
    @namespace Emberella
    @extends Ember.CollectionView
    @uses Emberella.MembershipMixin
   */

  Emberella.AutocompleteListView = Ember.CollectionView.extend(Emberella.MembershipMixin, {
    inherit: ['itemViewClass', 'content:suggestions', 'isVisible:isListVisible'],
    classNames: ['emberella-autocomplete-list']
  });


  /*
    `Emberella.AutocompleteItemView` is designed to be a drop-in suggestion
    listing view for `Emberella.AutocompleteView`. It sets up property bindings
    to allow certain properties, including `template`, to be inherited from its
    host `Emberella.AutocompleteView`.
  
    @class AutocompleteItemView
    @namespace Emberella
    @extends Ember.View
    @uses Emberella.MembershipMixin
   */

  Emberella.AutocompleteItemView = Ember.View.extend(Emberella.MembershipMixin, {
    inherit: ['template', 'highlighter', 'searchExpression', 'contentPath'],
    classNames: ['emberella-autocomplete-item'],
    classNameBindings: ['selected'],
    leadViewBinding: 'parentView.parentView',

    /*
      The string to display as the suggestion.
    
      @property displayContent
      @type String
      @default ''
      @readOnly
     */
    displayContent: Ember.computed(function() {
      var content, displayContent, highlighter, searchExpression, _ref;
      content = get(this, 'content');
      displayContent = (_ref = get(content, get(this, 'contentPath'))) != null ? _ref : '';
      searchExpression = get(this, 'searchExpression');
      highlighter = get(this, 'highlighter');
      return displayContent.replace(searchExpression, highlighter);
    }).property('content', 'contentPath').readOnly(),
    selected: Ember.computed(function() {
      return get(this, 'content') === get(this, 'leadView.selected');
    }).property('content', 'leadView.selected'),
    mouseEnter: function(e) {
      return this.dispatch('selectMember');
    },
    click: function(e) {
      return this.dispatch('selectMember', this, true);
    }
  });

}).call(this);
