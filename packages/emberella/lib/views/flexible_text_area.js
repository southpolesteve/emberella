// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-views
 */

(function() {
  var Emberella, SIZER_CLASS, SIZER_CONTAINER, SIZER_PROPERTY, get, set;

  Emberella = window.Emberella;

  get = Ember.get;

  set = Ember.set;

  SIZER_PROPERTY = '_sizing_element';

  SIZER_CLASS = 'flexible-text-area-sizer';

  SIZER_CONTAINER = '__flexibleInputContainer';


  /*
    `Emberella.FlexibleTextArea` enhances Ember's standard TextArea with the
    ability to expand vertically as the value grows in length. Thus, a string
    that requires 8 lines to display without truncation will be twice as tall as
    a string that is 4 lines tall.
  
    Values in the `FlexibleTextArea` may also be modified automatically to trim
    whitespace and collapse consecutive line breaks.
  
    @class FlexibleTextArea
    @namespace Emberella
    @extends Ember.TextArea
   */

  Emberella.FlexibleTextArea = Ember.TextArea.extend(Ember.StyleBindingsMixin, Emberella.FocusableMixin, {

    /*
      Defines an array of properties to transform into styles on the listing's
      DOM element.
    
      Functionality provided by `Ember.StyleBindingsMixin`.
    
      @property styleBindings
      @type Array
      @default ['height']
     */
    styleBindings: ['height'],

    /*
      Add the class name `emberella-flexible-text-area`.
    
      @property classNames
      @type Array
      @default ['emberella-flexible-text-area']
     */
    classNames: ['emberella-flexible-text-area'],

    /*
      If true, leading and trailing whitespace will be trimmed from the value of
      the text area each time it loses focus.
    
      @property trimWhitespace
      @type Boolean
      @default true
     */
    trimWhitespace: true,

    /*
      Sequences of multiple line breaks will be reduced to the number of line
      feeds specified by the `collapseWhitespace` property when the text area
      loses focus.
    
      For example, if `collapseWhitespace` is 2 and the value contains a sequence
      of 4 consecutive new lines, the 4 line breaks will be replaced with 2.
    
      Set to `0` if you do not wish to collapse line breaks.
    
      @property collapseWhitespace
      @type Integer
      @default 2
     */
    collapseWhitespace: 2,

    /*
      In pixels, the maximum height allowed for the text area regardless of the
      value's length.
    
      Set to 0 to allow the text area to grow as tall as needed to display
      its value.
    
      @property maxHeight
      @type Integer
      @default 0
     */
    maxHeight: 0,

    /*
      In pixels, the current height of the text area.
    
      Note: the initial value of `null` is critical for allowing the flexible
      text area to accurately calculate the height necessary to display
      its value.
    
      @property height
      @type Integer|Null
      @default null
     */
    height: null,

    /*
      @private
    
      A reference to the sizing element used to calculate the height necessary
      to display the current value of the text area without truncation.
    
      @property _sizing_element
      @type jQuery
      @default null
     */
    _sizing_element: null,

    /*
      After the value changes, recalculate the height of the text area
    
      @method adjustHeight
     */
    adjustHeight: Ember.observer(function() {
      var sizer, value;
      sizer = this.updateSizer();
      value = get(this, 'value');
      return Ember.run.later(this, function() {
        var height, maxHeight;
        if (get(this, 'isDestroyed') || get(this, 'isDestroying')) {
          return;
        }
        sizer.width(this.$().width());
        height = +sizer.outerHeight();
        maxHeight = +get(this, 'maxHeight');
        if (maxHeight && height > maxHeight) {
          height = maxHeight;
        }
        return set(this, 'height', height);
      }, 1);
    }, "value", "placeholder", "hasFocus"),

    /*
      Create an invisible element to "mirror" the text area. Uses a jQuery
      object to quickly duplicate the styling of the text area to better
      ensure height calculations compensate for borders, padding, margins,
      fonts, etc.
    
      @method createSizer
      @return jQuery A reference to the sizer node
     */
    createSizer: function() {
      var sizer, syncStyles;
      sizer = Ember.$('<div/>');
      sizer.addClass(SIZER_CLASS);
      syncStyles = function() {
        var element;
        element = get(this, 'element');
        if (!element) {
          return;
        }
        sizer.attr('style', getComputedStyle(element, "").cssText);
        sizer.css({
          position: 'absolute',
          zIndex: -1000,
          visibility: 'hidden',
          height: 'auto'
        });
        return sizer.appendTo(this._getSizerContainer());
      };
      Ember.run.schedule('afterRender', this, syncStyles);
      set(this, SIZER_PROPERTY, sizer);
      return sizer;
    },

    /*
      Update the size calculation node with the current value of the text area.
    
      Will create the sizer node if it hasn't already been created.
    
      @method updateSizer
      @return jQuery A reference to the sizer node
     */
    updateSizer: function() {
      var sizer, value, _ref, _ref1, _ref2;
      value = (_ref = get(this, 'value')) != null ? _ref : '';
      if (value === '') {
        value = (_ref1 = get(this, 'placeholder')) != null ? _ref1 : '&nbsp;';
      }
      sizer = (_ref2 = get(this, SIZER_PROPERTY)) != null ? _ref2 : this.createSizer();
      value = sizer.text(value).html().replace(/(\r\n|\n|\r)/gm, " <br/> ");
      sizer.html(value);
      return sizer;
    },

    /*
      Removes the sizer node from the DOM.
    
      @method removeSizer
      @return null
     */
    removeSizer: function() {
      var _ref;
      if ((_ref = get(this, SIZER_PROPERTY)) != null) {
        _ref.remove();
      }
      set(this, SIZER_PROPERTY, null);
      return null;
    },

    /*
      Handle insertion into the DOM.
    
      @event didInsertElement
     */
    didInsertElement: function() {
      this.adjustHeight();
      return this._super();
    },

    /*
      Handle imminent destruction.
    
      @event willDestroyElement
     */
    willDestroyElement: function() {
      this.removeSizer();
      return this._super();
    },

    /*
      Handle blur event.
    
      @event focusOut
     */
    focusOut: function() {
      set(this, 'hasFocus', false);
      if (get(this, 'trimWhitespace')) {
        set(this, 'value', Ember.$.trim(get(this, 'value')));
      }
      if (get(this, 'collapseWhitespace')) {
        this._collapseWhitespace();
      }
      return get(this, 'element').scrollTop = 0;
    },

    /*
      @private
    
      Replace long sequences of consecutive line feeds with the number of line
      feeds specified in the `collapseWhitespace` property.
    
      @method _collapseWhitespace
     */
    _collapseWhitespace: function() {
      var collapseWhitespace, exp, value;
      collapseWhitespace = +get(this, 'collapseWhitespace');
      if (!collapseWhitespace) {
        return;
      }
      value = get(this, 'value') || '';
      exp = new RegExp("(\r\n|\n|\r){" + collapseWhitespace + ",}", 'gm');
      return set(this, 'value', value.replace(exp, new Array(collapseWhitespace + 1).join('$1')));
    },
    _getSizerContainer: function() {
      var $div;
      $div = Ember.$('#' + SIZER_CONTAINER);
      if ($div.length === 0) {
        $div = Ember.$('<div id=' + SIZER_CONTAINER + '></div>').appendTo(document.body);
      }
      return $div;
    }
  });

}).call(this);
