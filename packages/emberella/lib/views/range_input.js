// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-views
 */

(function() {
  var Emberella, get, set;

  Emberella = window.Emberella;

  get = Ember.get;

  set = Ember.set;


  /*
    `Emberella.RangeInput` is a simple wrapper for `<input type="range" />` with
    support for change and scroll wheel events.
  
    WebKit only.
  
    @class RangeInput
    @namespace Emberella
   */

  Emberella.RangeInput = Ember.View.extend({
    classNames: ['ember-range'],
    value: 0.5,
    minimum: 0,
    maximum: 1,
    step: 0.01,
    scrollSpeed: 0.2,
    defaultTemplate: Ember.Handlebars.compile('<input type="range" {{bind-attr min="view.minimum"}} {{bind-attr max="view.maximum"}} {{bind-attr step="view.step"}} {{bind-attr value="view.value"}} />'),
    change: function(e) {
      var target;
      target = e.target;
      set(this, 'value', +target.value);
      return true;
    },
    mouseScroll: function(e) {
      var delta, deltaX, deltaY, evt, max, min, newVal, scrollSpeed, step, value;
      e.stopPropagation();
      e.preventDefault();
      evt = e.originalEvent;
      min = get(this, 'minimum');
      max = get(this, 'maximum');
      step = get(this, 'step');
      scrollSpeed = get(this, 'scrollSpeed');
      deltaX = evt.wheelDeltaX * scrollSpeed;
      if (!evt.webkitDirectionInvertedFromDevice) {
        deltaX = -1 * deltaX;
      }
      deltaY = evt.wheelDeltaY * scrollSpeed;
      if (evt.webkitDirectionInvertedFromDevice) {
        deltaY = -1 * deltaY;
      }
      delta = deltaX + deltaY;
      newVal = parseInt(get(this, 'value'), 10) + (delta * step);
      value = Math.round(newVal / step) * step;
      if (value < min) {
        set(this, 'value', min);
      } else if (value > max) {
        set(this, 'value', max);
      } else {
        if (!isNaN(value)) {
          set(this, 'value', value);
        }
      }
      return true;
    }
  });

}).call(this);
