// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-views
 */

(function() {
  var Emberella, LIST_ITEM_CLASS, get, set;

  Emberella = window.Emberella;

  get = Ember.get;

  set = Ember.set;

  LIST_ITEM_CLASS = 'emberella-list-item-view';


  /*
    `Emberella.ListItemView` is an `Ember.View` designed for use as a child
    listing of `Emberella.ListView`.
  
    This class requires the very handy `Ember.StyleBindingsMixin` that is
    packaged with
    [Ember TableView](https://github.com/Addepar/ember-table/ "Ember TableView")
  
    @class ListItemView
    @namespace Emberella
    @extends Emberella.View
    @uses Ember.StyleBindingsMixin
   */

  Emberella.ListItemView = Emberella.View.extend(Ember.StyleBindingsMixin, {

    /*
      Add the class name `emberella-list-item-view`.
    
      @property classNames
      @type Array
      @default ['emberella-list-item-view']
     */
    classNames: [LIST_ITEM_CLASS],

    /*
      Adds a `loading` class to the listing element if its content isn't loaded.
    
      @property classNameBindings
      @type Array
      @default ['isLoaded::loading']
     */
    classNameBindings: ['fluctuateListingClass', 'isLoaded::loading'],

    /*
      Loading state of view. Typically bound to the `isLoaded` property of the
      listing's content.
    
      @property isLoaded
      @type Boolean
     */
    isLoadedBinding: 'content.isLoaded',

    /*
      Defines an array of properties to transform into styles on the listing's
      DOM element.
    
      Functionality provided by `Ember.StyleBindingsMixin`.
    
      @property styleBindings
      @type Array
      @default ['top', 'display', 'position', 'height']
     */
    styleBindings: ['top', 'display', 'position', 'height', 'pointer-events'],

    /*
      In pixels, the height of each listing. Typically, this value is provided
      by the `rowHeight` property of the parent `Emberella.ListView`.
    
      @property rowHeight
      @type Integer
     */
    rowHeightBinding: 'parentView.rowHeight',

    /*
      Give each child listing an additional class name based on the child's
      content index.
    
      For example, setting this property to 2 will cause listings to alternate
      between a class containing 0 or 1. (contentIndex % 2)
    
      @property fluctuateListing
      @type Integer
      @default 2
     */
    fluctuateListing: 2,

    /*
      The seed for the fluctuated class name.
    
      For example, setting this property to `item-listing` would result in class
      names like `item-listing-0` and `item-listing-1`.
    
      @property fluctuateListingPrefix
      @type String
      @default 'emberella-list-item-view'
     */
    fluctuateListingPrefix: LIST_ITEM_CLASS,
    "pointer-events": Ember.computed(function() {
      if (get(this, 'parentView.isScrolling')) {
        return 'none';
      } else {
        return void 0;
      }
    }).property('parentView.isScrolling'),

    /*
      Set `absolute` positioning for each listing.
    
      @property position
      @type String
      @default 'absolute'
     */
    position: Ember.computed(function() {
      return 'absolute';
    }).property(),

    /*
      In pixels, calculate the distance from the top this listing should be
      positioned within the scrolling list.
    
      @property top
      @type Integer
     */
    top: Ember.computed(function() {
      return get(this, 'contentIndex') * get(this, 'rowHeight');
    }).property('contentIndex', 'rowHeight'),

    /*
      Additional class name for this listing.
    
      @property fluctuateListingClass
      @type String
     */
    fluctuateListingClass: Ember.computed(function() {
      var contentIndex, fluctuateListing, fluctuateListingPrefix;
      contentIndex = get(this, 'contentIndex');
      fluctuateListing = parseInt(get(this, 'fluctuateListing'), 10);
      fluctuateListingPrefix = get(this, 'fluctuateListingPrefix');
      if (!(fluctuateListing && fluctuateListing > 0)) {
        return '';
      }
      return [fluctuateListingPrefix, contentIndex % fluctuateListing].join('-');
    }).property('contentIndex', 'fluctuateListing', 'fluctuateListingPrefix'),

    /*
      In pixels, the height of this listing.
    
      @property height
      @type Integer
     */
    height: Ember.computed(function() {
      return +get(this, 'rowHeight');
    }).property('rowHeight'),

    /*
      The display property for this listing 'none' or no value.
    
      Used to hide listings with null or undefined content.
    
      @property display
      @type String
     */
    display: Ember.computed(function() {
      if (!get(this, 'content')) {
        return 'none';
      }
    }).property('content'),

    /*
      Called before destruction of the view object.
    
      @method willDestroy
     */
    willDestroy: function() {
      set(this, 'content', null);
      return this._super();
    },

    /*
      Called after new content assigned to this listing. Override this method to
      inject special data processing or behavior.
    
      @method prepareContent
      @param {Integer} contentIndex
      @param {Boolean} dontFetch
     */
    prepareContent: Ember.K,

    /*
      Called before new content assigned to this listing. Override this method to
      inject special data processing or behavior.
    
      @method teardownContent
      @param {Integer} contentIndex
      @param {Boolean} dontFetch
     */
    teardownContent: Ember.K
  });

}).call(this);
