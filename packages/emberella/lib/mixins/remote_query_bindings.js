// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-mixins
 */

(function() {
  var Emberella, defineProperty, get, keys;

  Emberella = window.Emberella;

  get = Ember.get;

  keys = Ember.keys;

  defineProperty = Ember.defineProperty;


  /*
    `Emberella.RemoteQueryBindingsMixin` packages the properties specified in the
    `remoteQueryBindings` attribute into a plain object to be used as query
    parameters for fetching data. To prevent excessive remote requests, the
    notification of property changes that affect the query object is debounced
    for a configurable number of milliseconds (700ms default).
  
    This mixin is for use with controllers.
  
    @example
      App.PeopleController = Ember.ArrayController.extend(Emberella.RemoteQueryBindingsMixin, {
        remoteQueryBindings: ['query:q', 'sort', 'reverse'], // Map the 'query' property to 'q'
        remoteQueryDidChange: function() {
          // DO SOMETHING WHEN QUERY OBJECT CHANGES
        }
      })
  
    @class RemoteQueryBindingsMixin
    @namespace Emberella
   */

  Emberella.RemoteQueryBindingsMixin = Ember.Mixin.create({
    init: function() {
      var ret;
      ret = this._super();
      this.applyRemoteQueryBindings();
      get(this, 'remoteQuery');
      return ret;
    },

    /*
      The query object: a plain object to send as query parameters.
    
      @property remoteQuery
      @type Object
      @default null
     */
    remoteQuery: null,

    /*
      How long to wait after the last change to the query object before notifying
      the host object of the change.
    
      @property remoteQueryDelay
      @type Integer
      @default 700
     */
    remoteQueryDelay: 700,

    /*
      Debounced notification function.
    
      @property debounceRemoteQueryChange
      @type Function
     */
    debounceRemoteQueryChange: Ember.computed(function() {
      return Emberella.debounce((function(_this) {
        return function() {
          return _this.remoteQueryDidChange(get(_this, 'remoteQuery'));
        };
      })(this), get(this, 'remoteQueryDelay'));
    }).property('remoteQueryDelay'),

    /*
      Setup bindings to watch the properties named in the `remoteQueryBindings`
      attribute of this object. As these properties change, the remote query
      object will be re-assembled and set as the `remoteQuery` property.
    
      @method applyRemoteQueryBindings
      @return null
     */
    applyRemoteQueryBindings: function() {
      var lookup, params, properties, queryComputed, remoteQueryBindings;
      remoteQueryBindings = this.remoteQueryBindings;
      if (!remoteQueryBindings) {
        return;
      }
      lookup = {};
      remoteQueryBindings.forEach(function(binding) {
        var param, property, _ref;
        _ref = binding.split(':'), property = _ref[0], param = _ref[1];
        return lookup[param || property] = property;
      });
      params = keys(lookup);
      properties = params.map(function(param) {
        return lookup[param];
      });
      queryComputed = Ember.computed((function(_this) {
        return function() {
          var result;
          result = {};
          params.forEach(function(param) {
            var val;
            val = get(_this, lookup[param]);
            if (val) {
              return result[param] = val;
            }
          });
          return result;
        };
      })(this));
      queryComputed.property.apply(queryComputed, properties);
      defineProperty(this, 'remoteQuery', queryComputed);
      return null;
    },

    /*
      Hook for performing actions when notified of updates to the remote
      query object. Override to enable controller to respond to changes to the
      query object.
    
      @method remoteQueryDidChange
      @param {Object} query The query object
     */
    remoteQueryDidChange: Ember.K,

    /*
      @private
    
      Watches for all changes to the remote query object and calls the debounced
      notification function.
    
      @method _remoteQueryChange
     */
    _remoteQueryChange: Ember.observer(function() {
      return get(this, 'debounceRemoteQueryChange')();
    }, 'remoteQuery')
  });

}).call(this);
