// Generated by CoffeeScript 1.7.1

/*
@module emberella
@submodule emberella-mixins
 */

(function() {
  var Emberella, SEARCH_SUBSTITUTION, get, guidFor, set, typeOf;

  Emberella = window.Emberella;

  get = Ember.get;

  set = Ember.set;

  typeOf = Ember.typeOf;

  guidFor = Ember.guidFor;

  SEARCH_SUBSTITUTION = /%s/g;


  /*
    `Emberella.AutocompleteSupport` provides a basic structure for fetching and
    caching remote autocomplete suggestions for a given search string.
  
    This mixin is intended to extend a controller.
  
    If you'll be using `Emberella.AutocompleteView` with a remote source, extend
    its controller with this mixin to get started quickly. This mixin uses the
    autocomplete view instance's `source` property to lookup an associated URL
    string. The `search` and `url` are then sent to your controller's
    `didRequestSuggestions()` method to perform the necessary asynchronous
    queries. If successful, the results of the query can be supplied back to the
    autocomplete view using this mixin's `provideSearchResults()` method.
  
    @example
      AutocompleteController = Ember.ArrayController.extend(Emberella.AutocompleteSupport, {
  
        // The autocomplete view instance's `source` property should be set to
        // `'cities'` to allow the AutocompleteSupport mixin to find the URL-like
        // string and replace the %s with the current search string.
  
        cities: '/api/search?q=%s',
  
  
        // Overriding `didRequestSuggestions()` to inject custom suggestion
        // fetching behavior.
  
        didRequestSuggestions: function(actionContext, search, url) {
          var jqxhr;
  
          jqxhr = jQuery.ajax({
            context: this,
            url: url,
            dataType: 'json'
          }).done(function(result, status, xhr) {
  
            // Inject results fetched from AJAX response into the view with the
            // `provideSearchResults()` method.
  
            this.provideSearchResults(actionContext, search, url, result.search || Ember.A());
          });
        }
      });
  
    @class AutocompleteSupport
    @namespace Emberella
   */

  Emberella.AutocompleteSupport = Ember.Mixin.create({
    init: function() {
      this.__cached_results = {};
      return this._super();
    },
    actions: {
      searchForSuggestions: function() {
        return this.searchForSuggestions.apply(this, arguments);
      }
    },

    /*
      Get cached results for a given view/key.
    
      @method getCacheResults
      @param Ember.View actionContext The view making the search request
      @param String url A key to retrieve results from
     */
    getCacheResults: function(actionContext, url) {
      var path;
      path = [guidFor(actionContext), this._cleanURL(url)].join('.');
      return get(this.__cached_results, path);
    },

    /*
      Set cached results for a given view/key.
    
      @method setCacheResults
      @param Ember.View actionContext The view making the search request
      @param String url A key to cache results with
      @param Array value The value to cache
     */
    setCacheResults: function(actionContext, url, value) {
      var path, uniq, _ref;
      uniq = guidFor(actionContext);
      set(this.__cached_results, uniq, (_ref = get(this.__cached_results, uniq)) != null ? _ref : {});
      path = [uniq, this._cleanURL(url)].join('.');
      return set(this.__cached_results, path, value);
    },

    /*
      Supply suggestions to the view.
    
      Note: results from the server are directly injected into the view
      instance's `allSuggestions` property to allow multiple autocomplete
      views to coexist without impacting each other's visibility state,
      suggestions, etc.
    
      @method provideSearchResults
      @param Ember.View actionContext The view making the search request
      @param String search The original search string
      @param String url The "URL" string
      @param Array results The list of available suggestions
     */
    provideSearchResults: function(actionContext, search, url, results) {
      results = Ember.isArray(results) ? results : [results];
      this.setCacheResults(actionContext, url, results);
      actionContext.trigger('didRetrieveSuggestions', search, results);
      return this;
    },

    /*
      The handler for the `searchForSuggestions` action.
    
      @event searchForSuggestions
      @param Ember.View actionContext The view making the search request
     */
    searchForSuggestions: function(actionContext) {
      var actionSource, search, source, suggestions, url;
      actionSource = actionContext.get('source');
      search = actionContext.get('search');
      source = get(this, actionSource);
      if (typeOf(source) !== 'string') {
        return;
      }
      url = this._buildSuggestionURL(source, search);
      suggestions = this.getCacheResults(actionContext, url);
      if (Ember.isArray(suggestions)) {
        this.provideSearchResults(actionContext, search, url, suggestions);
      } else if (suggestions == null) {
        this.setCacheResults(actionContext, url, {
          'isLoading': true
        });
        if (!(search === '' || url === '')) {
          this.didRequestSuggestions(actionContext, search, url);
        }
      }
      return null;
    },

    /*
      Override this method in your controller to perform a query for
      autocomplete suggestions.
    
      @method didRequestSuggestions
      @param Ember.View actionContext The view making the search request
      @param String search The original search string
      @param String url The "URL" string
     */
    didRequestSuggestions: Ember.K,

    /*
      @private
    
      Replace "%s" in a given string with the current search parameter.
    
      @method _buildSuggestionURL
      @param String source String to sub the search string into
      @param String search The original search string
     */
    _buildSuggestionURL: function(source, search) {
      var url;
      url = source.replace(SEARCH_SUBSTITUTION, search);
      if (url === '') {
        url = search;
      }
      return url;
    },
    _cleanURL: function(url) {
      return url.replace('.', '{dot}');
    }
  });

}).call(this);
